//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CurrentExchangeRate
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://communicationoffice.nbs.rs", ConfigurationName="CurrentExchangeRate.CurrentExchangeRateServiceSoap")]
    public interface CurrentExchangeRateServiceSoap
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://communicationoffice.nbs.rs/GetServiceVersion", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CurrentExchangeRate.GetServiceVersionResponse> GetServiceVersionAsync(CurrentExchangeRate.GetServiceVersionRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://communicationoffice.nbs.rs/GetCurrentExchangeRate", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CurrentExchangeRate.GetCurrentExchangeRateResponse> GetCurrentExchangeRateAsync(CurrentExchangeRate.GetCurrentExchangeRateRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://communicationoffice.nbs.rs/GetCurrentExchangeRateList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CurrentExchangeRate.GetCurrentExchangeRateListResponse> GetCurrentExchangeRateListAsync(CurrentExchangeRate.GetCurrentExchangeRateListRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://communicationoffice.nbs.rs/GetCurrentExchangeRateByRateType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CurrentExchangeRate.GetCurrentExchangeRateByRateTypeResponse> GetCurrentExchangeRateByRateTypeAsync(CurrentExchangeRate.GetCurrentExchangeRateByRateTypeRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://communicationoffice.nbs.rs/GetExchangeRateListType", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<CurrentExchangeRate.GetExchangeRateListTypeResponse> GetExchangeRateListTypeAsync(CurrentExchangeRate.GetExchangeRateListTypeRequest request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://communicationoffice.nbs.rs")]
    public partial class AuthenticationHeader
    {
        
        private string userNameField;
        
        private string passwordField;
        
        private System.Guid licenceIDField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=0)]
        public string UserName
        {
            get
            {
                return this.userNameField;
            }
            set
            {
                this.userNameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=1)]
        public string Password
        {
            get
            {
                return this.passwordField;
            }
            set
            {
                this.passwordField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Order=2)]
        public System.Guid LicenceID
        {
            get
            {
                return this.licenceIDField;
            }
            set
            {
                this.licenceIDField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceVersion", WrapperNamespace="http://communicationoffice.nbs.rs", IsWrapped=true)]
    public partial class GetServiceVersionRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://communicationoffice.nbs.rs")]
        public CurrentExchangeRate.AuthenticationHeader AuthenticationHeader;
        
        public GetServiceVersionRequest()
        {
        }
        
        public GetServiceVersionRequest(CurrentExchangeRate.AuthenticationHeader AuthenticationHeader)
        {
            this.AuthenticationHeader = AuthenticationHeader;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetServiceVersionResponse", WrapperNamespace="http://communicationoffice.nbs.rs", IsWrapped=true)]
    public partial class GetServiceVersionResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://communicationoffice.nbs.rs", Order=0)]
        public string GetServiceVersionResult;
        
        public GetServiceVersionResponse()
        {
        }
        
        public GetServiceVersionResponse(string GetServiceVersionResult)
        {
            this.GetServiceVersionResult = GetServiceVersionResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCurrentExchangeRate", WrapperNamespace="http://communicationoffice.nbs.rs", IsWrapped=true)]
    public partial class GetCurrentExchangeRateRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://communicationoffice.nbs.rs")]
        public CurrentExchangeRate.AuthenticationHeader AuthenticationHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://communicationoffice.nbs.rs", Order=0)]
        public int exchangeRateListTypeID;
        
        public GetCurrentExchangeRateRequest()
        {
        }
        
        public GetCurrentExchangeRateRequest(CurrentExchangeRate.AuthenticationHeader AuthenticationHeader, int exchangeRateListTypeID)
        {
            this.AuthenticationHeader = AuthenticationHeader;
            this.exchangeRateListTypeID = exchangeRateListTypeID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCurrentExchangeRateResponse", WrapperNamespace="http://communicationoffice.nbs.rs", IsWrapped=true)]
    public partial class GetCurrentExchangeRateResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://communicationoffice.nbs.rs", Order=0)]
        public CurrentExchangeRate.ArrayOfXElement GetCurrentExchangeRateResult;
        
        public GetCurrentExchangeRateResponse()
        {
        }
        
        public GetCurrentExchangeRateResponse(CurrentExchangeRate.ArrayOfXElement GetCurrentExchangeRateResult)
        {
            this.GetCurrentExchangeRateResult = GetCurrentExchangeRateResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCurrentExchangeRateList", WrapperNamespace="http://communicationoffice.nbs.rs", IsWrapped=true)]
    public partial class GetCurrentExchangeRateListRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://communicationoffice.nbs.rs")]
        public CurrentExchangeRate.AuthenticationHeader AuthenticationHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://communicationoffice.nbs.rs", Order=0)]
        public int exchangeRateListTypeID;
        
        public GetCurrentExchangeRateListRequest()
        {
        }
        
        public GetCurrentExchangeRateListRequest(CurrentExchangeRate.AuthenticationHeader AuthenticationHeader, int exchangeRateListTypeID)
        {
            this.AuthenticationHeader = AuthenticationHeader;
            this.exchangeRateListTypeID = exchangeRateListTypeID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCurrentExchangeRateListResponse", WrapperNamespace="http://communicationoffice.nbs.rs", IsWrapped=true)]
    public partial class GetCurrentExchangeRateListResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://communicationoffice.nbs.rs", Order=0)]
        public CurrentExchangeRate.ArrayOfXElement GetCurrentExchangeRateListResult;
        
        public GetCurrentExchangeRateListResponse()
        {
        }
        
        public GetCurrentExchangeRateListResponse(CurrentExchangeRate.ArrayOfXElement GetCurrentExchangeRateListResult)
        {
            this.GetCurrentExchangeRateListResult = GetCurrentExchangeRateListResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCurrentExchangeRateByRateType", WrapperNamespace="http://communicationoffice.nbs.rs", IsWrapped=true)]
    public partial class GetCurrentExchangeRateByRateTypeRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://communicationoffice.nbs.rs")]
        public CurrentExchangeRate.AuthenticationHeader AuthenticationHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://communicationoffice.nbs.rs", Order=0)]
        public int currencyCode;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://communicationoffice.nbs.rs", Order=1)]
        public int exchangeRateListTypeID;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://communicationoffice.nbs.rs", Order=2)]
        public int rateType;
        
        public GetCurrentExchangeRateByRateTypeRequest()
        {
        }
        
        public GetCurrentExchangeRateByRateTypeRequest(CurrentExchangeRate.AuthenticationHeader AuthenticationHeader, int currencyCode, int exchangeRateListTypeID, int rateType)
        {
            this.AuthenticationHeader = AuthenticationHeader;
            this.currencyCode = currencyCode;
            this.exchangeRateListTypeID = exchangeRateListTypeID;
            this.rateType = rateType;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetCurrentExchangeRateByRateTypeResponse", WrapperNamespace="http://communicationoffice.nbs.rs", IsWrapped=true)]
    public partial class GetCurrentExchangeRateByRateTypeResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://communicationoffice.nbs.rs", Order=0)]
        public decimal GetCurrentExchangeRateByRateTypeResult;
        
        public GetCurrentExchangeRateByRateTypeResponse()
        {
        }
        
        public GetCurrentExchangeRateByRateTypeResponse(decimal GetCurrentExchangeRateByRateTypeResult)
        {
            this.GetCurrentExchangeRateByRateTypeResult = GetCurrentExchangeRateByRateTypeResult;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetExchangeRateListType", WrapperNamespace="http://communicationoffice.nbs.rs", IsWrapped=true)]
    public partial class GetExchangeRateListTypeRequest
    {
        
        [System.ServiceModel.MessageHeaderAttribute(Namespace="http://communicationoffice.nbs.rs")]
        public CurrentExchangeRate.AuthenticationHeader AuthenticationHeader;
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://communicationoffice.nbs.rs", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(IsNullable=true)]
        public System.Nullable<int> exchangeRateListTypeID;
        
        public GetExchangeRateListTypeRequest()
        {
        }
        
        public GetExchangeRateListTypeRequest(CurrentExchangeRate.AuthenticationHeader AuthenticationHeader, System.Nullable<int> exchangeRateListTypeID)
        {
            this.AuthenticationHeader = AuthenticationHeader;
            this.exchangeRateListTypeID = exchangeRateListTypeID;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetExchangeRateListTypeResponse", WrapperNamespace="http://communicationoffice.nbs.rs", IsWrapped=true)]
    public partial class GetExchangeRateListTypeResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://communicationoffice.nbs.rs", Order=0)]
        public CurrentExchangeRate.ArrayOfXElement GetExchangeRateListTypeResult;
        
        public GetExchangeRateListTypeResponse()
        {
        }
        
        public GetExchangeRateListTypeResponse(CurrentExchangeRate.ArrayOfXElement GetExchangeRateListTypeResult)
        {
            this.GetExchangeRateListTypeResult = GetExchangeRateListTypeResult;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public interface CurrentExchangeRateServiceSoapChannel : CurrentExchangeRate.CurrentExchangeRateServiceSoap, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.3")]
    public partial class CurrentExchangeRateServiceSoapClient : System.ServiceModel.ClientBase<CurrentExchangeRate.CurrentExchangeRateServiceSoap>, CurrentExchangeRate.CurrentExchangeRateServiceSoap
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CurrentExchangeRateServiceSoapClient(EndpointConfiguration endpointConfiguration) : 
                base(CurrentExchangeRateServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), CurrentExchangeRateServiceSoapClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CurrentExchangeRateServiceSoapClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CurrentExchangeRateServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CurrentExchangeRateServiceSoapClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CurrentExchangeRateServiceSoapClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CurrentExchangeRateServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CurrentExchangeRate.GetServiceVersionResponse> CurrentExchangeRate.CurrentExchangeRateServiceSoap.GetServiceVersionAsync(CurrentExchangeRate.GetServiceVersionRequest request)
        {
            return base.Channel.GetServiceVersionAsync(request);
        }
        
        public System.Threading.Tasks.Task<CurrentExchangeRate.GetServiceVersionResponse> GetServiceVersionAsync(CurrentExchangeRate.AuthenticationHeader AuthenticationHeader)
        {
            CurrentExchangeRate.GetServiceVersionRequest inValue = new CurrentExchangeRate.GetServiceVersionRequest();
            inValue.AuthenticationHeader = AuthenticationHeader;
            return ((CurrentExchangeRate.CurrentExchangeRateServiceSoap)(this)).GetServiceVersionAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CurrentExchangeRate.GetCurrentExchangeRateResponse> CurrentExchangeRate.CurrentExchangeRateServiceSoap.GetCurrentExchangeRateAsync(CurrentExchangeRate.GetCurrentExchangeRateRequest request)
        {
            return base.Channel.GetCurrentExchangeRateAsync(request);
        }
        
        public System.Threading.Tasks.Task<CurrentExchangeRate.GetCurrentExchangeRateResponse> GetCurrentExchangeRateAsync(CurrentExchangeRate.AuthenticationHeader AuthenticationHeader, int exchangeRateListTypeID)
        {
            CurrentExchangeRate.GetCurrentExchangeRateRequest inValue = new CurrentExchangeRate.GetCurrentExchangeRateRequest();
            inValue.AuthenticationHeader = AuthenticationHeader;
            inValue.exchangeRateListTypeID = exchangeRateListTypeID;
            return ((CurrentExchangeRate.CurrentExchangeRateServiceSoap)(this)).GetCurrentExchangeRateAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CurrentExchangeRate.GetCurrentExchangeRateListResponse> CurrentExchangeRate.CurrentExchangeRateServiceSoap.GetCurrentExchangeRateListAsync(CurrentExchangeRate.GetCurrentExchangeRateListRequest request)
        {
            return base.Channel.GetCurrentExchangeRateListAsync(request);
        }
        
        public System.Threading.Tasks.Task<CurrentExchangeRate.GetCurrentExchangeRateListResponse> GetCurrentExchangeRateListAsync(CurrentExchangeRate.AuthenticationHeader AuthenticationHeader, int exchangeRateListTypeID)
        {
            CurrentExchangeRate.GetCurrentExchangeRateListRequest inValue = new CurrentExchangeRate.GetCurrentExchangeRateListRequest();
            inValue.AuthenticationHeader = AuthenticationHeader;
            inValue.exchangeRateListTypeID = exchangeRateListTypeID;
            return ((CurrentExchangeRate.CurrentExchangeRateServiceSoap)(this)).GetCurrentExchangeRateListAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CurrentExchangeRate.GetCurrentExchangeRateByRateTypeResponse> CurrentExchangeRate.CurrentExchangeRateServiceSoap.GetCurrentExchangeRateByRateTypeAsync(CurrentExchangeRate.GetCurrentExchangeRateByRateTypeRequest request)
        {
            return base.Channel.GetCurrentExchangeRateByRateTypeAsync(request);
        }
        
        public System.Threading.Tasks.Task<CurrentExchangeRate.GetCurrentExchangeRateByRateTypeResponse> GetCurrentExchangeRateByRateTypeAsync(CurrentExchangeRate.AuthenticationHeader AuthenticationHeader, int currencyCode, int exchangeRateListTypeID, int rateType)
        {
            CurrentExchangeRate.GetCurrentExchangeRateByRateTypeRequest inValue = new CurrentExchangeRate.GetCurrentExchangeRateByRateTypeRequest();
            inValue.AuthenticationHeader = AuthenticationHeader;
            inValue.currencyCode = currencyCode;
            inValue.exchangeRateListTypeID = exchangeRateListTypeID;
            inValue.rateType = rateType;
            return ((CurrentExchangeRate.CurrentExchangeRateServiceSoap)(this)).GetCurrentExchangeRateByRateTypeAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<CurrentExchangeRate.GetExchangeRateListTypeResponse> CurrentExchangeRate.CurrentExchangeRateServiceSoap.GetExchangeRateListTypeAsync(CurrentExchangeRate.GetExchangeRateListTypeRequest request)
        {
            return base.Channel.GetExchangeRateListTypeAsync(request);
        }
        
        public System.Threading.Tasks.Task<CurrentExchangeRate.GetExchangeRateListTypeResponse> GetExchangeRateListTypeAsync(CurrentExchangeRate.AuthenticationHeader AuthenticationHeader, System.Nullable<int> exchangeRateListTypeID)
        {
            CurrentExchangeRate.GetExchangeRateListTypeRequest inValue = new CurrentExchangeRate.GetExchangeRateListTypeRequest();
            inValue.AuthenticationHeader = AuthenticationHeader;
            inValue.exchangeRateListTypeID = exchangeRateListTypeID;
            return ((CurrentExchangeRate.CurrentExchangeRateServiceSoap)(this)).GetExchangeRateListTypeAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CurrentExchangeRateServiceSoap))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                result.Security.Mode = System.ServiceModel.BasicHttpSecurityMode.Transport;
                return result;
            }
            if ((endpointConfiguration == EndpointConfiguration.CurrentExchangeRateServiceSoap12))
            {
                System.ServiceModel.Channels.CustomBinding result = new System.ServiceModel.Channels.CustomBinding();
                System.ServiceModel.Channels.TextMessageEncodingBindingElement textBindingElement = new System.ServiceModel.Channels.TextMessageEncodingBindingElement();
                textBindingElement.MessageVersion = System.ServiceModel.Channels.MessageVersion.CreateVersion(System.ServiceModel.EnvelopeVersion.Soap12, System.ServiceModel.Channels.AddressingVersion.None);
                result.Elements.Add(textBindingElement);
                System.ServiceModel.Channels.HttpsTransportBindingElement httpsBindingElement = new System.ServiceModel.Channels.HttpsTransportBindingElement();
                httpsBindingElement.AllowCookies = true;
                httpsBindingElement.MaxBufferSize = int.MaxValue;
                httpsBindingElement.MaxReceivedMessageSize = int.MaxValue;
                result.Elements.Add(httpsBindingElement);
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CurrentExchangeRateServiceSoap))
            {
                return new System.ServiceModel.EndpointAddress("https://webservices.nbs.rs/CommunicationOfficeService1_0/CurrentExchangeRateServi" +
                        "ce.asmx");
            }
            if ((endpointConfiguration == EndpointConfiguration.CurrentExchangeRateServiceSoap12))
            {
                return new System.ServiceModel.EndpointAddress("https://webservices.nbs.rs/CommunicationOfficeService1_0/CurrentExchangeRateServi" +
                        "ce.asmx");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        public enum EndpointConfiguration
        {
            
            CurrentExchangeRateServiceSoap,
            
            CurrentExchangeRateServiceSoap12,
        }
    }
    
    [System.Xml.Serialization.XmlSchemaProviderAttribute(null, IsAny=true)]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("dotnet-svcutil-lib", "2.0.3.0")]
    public partial class ArrayOfXElement : object, System.Xml.Serialization.IXmlSerializable
    {
        
        private System.Collections.Generic.List<System.Xml.Linq.XElement> nodesList = new System.Collections.Generic.List<System.Xml.Linq.XElement>();
        
        public ArrayOfXElement()
        {
        }
        
        public virtual System.Collections.Generic.List<System.Xml.Linq.XElement> Nodes
        {
            get
            {
                return this.nodesList;
            }
        }
        
        public virtual System.Xml.Schema.XmlSchema GetSchema()
        {
            throw new System.NotImplementedException();
        }
        
        public virtual void WriteXml(System.Xml.XmlWriter writer)
        {
            System.Collections.Generic.IEnumerator<System.Xml.Linq.XElement> e = nodesList.GetEnumerator();
            for (
            ; e.MoveNext(); 
            )
            {
                ((System.Xml.Serialization.IXmlSerializable)(e.Current)).WriteXml(writer);
            }
        }
        
        public virtual void ReadXml(System.Xml.XmlReader reader)
        {
            for (
            ; (reader.NodeType != System.Xml.XmlNodeType.EndElement); 
            )
            {
                if ((reader.NodeType == System.Xml.XmlNodeType.Element))
                {
                    System.Xml.Linq.XElement elem = new System.Xml.Linq.XElement("default");
                    ((System.Xml.Serialization.IXmlSerializable)(elem)).ReadXml(reader);
                    Nodes.Add(elem);
                }
                else
                {
                    reader.Skip();
                }
            }
        }
    }
}
