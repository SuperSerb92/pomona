@{
    Layout = null;
}

@{ await Html.RenderPartialAsync("PopupMessage"); }
@{ await Html.RenderPartialAsync("PopupMessageYesNo"); }

@(Html.DevExtreme().DataGrid<Pomona.Models.BarCodeGenerator>
    ()
    .ID("barcodeGrid")
    .ShowBorders(true)
    .ElementAttr("overflow", "auto")
    .ShowColumnHeaders(true)
    .Sorting(sorting => sorting.Mode(GridSortingMode.Multiple))
    .ColumnMinWidth(50)
    .ColumnResizingMode(ColumnResizingMode.Widget)
    .DataSource(d => d.Mvc().Controller("BarCodeMenu")
    .LoadAction("GetBarCodes")
    .InsertAction("InsertBarcode")
    .DeleteAction("DeleteBarcode")
    .Key("BarCode"))
    .Columns(columns =>
    {

        columns.AddFor(u => u.EmployeeID).Lookup(lookup =>
        lookup.DataSource(ds=> ds.WebApi().Controller("Employee").LoadAction("GetEmployeesStaticList")
        .Key("EmployeeID")).DisplayExpr("NameSurname").ValueExpr("EmployeeID"))
        .Caption("Berač").MinWidth(120).SetCellValue("cellValueWorker");

        columns.AddFor(u => u.UserID).Lookup(lookup =>
        lookup.DataSource(ds => ds.WebApi().Controller("Login").LoadAction("GetUsersStaticList")
        .Key("UserID")).DisplayExpr("NameSurname").ValueExpr("UserID"))
        .Caption("Kontrolor").MinWidth(120);

        //  columns.AddFor(u => u.DateGenerated).Caption("Datum").MinWidth(80);
        columns.Add().DataField("DateGenerated").DataType(GridColumnDataType.Date).Caption("Datum").Format("dd.MM.yyyy");

        columns.AddFor(u => u.PlotListId).SetCellValue("setPlotStateValue").Lookup(lookup =>
        lookup.DataSource(ds => ds.WebApi().Controller("Plot").LoadAction("GetPlotList")
        .Key("PlotListId")).DisplayExpr("PlotListName").ValueExpr("PlotListId")).Caption("Parcela").MinWidth(100);

        columns.AddFor(u => u.PlotId).Lookup(lookup =>
        lookup.DataSource("getPlots").DisplayExpr("PlotLabel").ValueExpr("PlotId").AllowClearing(true)).Caption("Red Parcele").MinWidth(100);

        columns.AddFor(u => u.CultureId).SetCellValue("setStateValue").Lookup(lookup =>
        lookup.DataSource(ds => ds.WebApi().Controller("Culture").LoadAction("GetCulturesStaticList")
        .Key("CultureId")).DisplayExpr("CultureName").ValueExpr("CultureId")).Caption("Vrsta voća").MinWidth(100);

        columns.AddFor(u => u.CultureTypeId).Lookup(lookup =>
        lookup.DataSource("getCultureTypes").DisplayExpr("CultureTypeName").ValueExpr("CultureTypeId")).Caption("Sorta voća").MinWidth(100);

        columns.AddFor(u => u.PackagingId).Lookup(lookup =>
        lookup.DataSource(ds => ds.WebApi().Controller("Packaging").LoadAction("GetPackagingsStaticList")
        .Key("PackagingId")).DisplayExpr("PackagingType").ValueExpr("PackagingId")).Caption("Tip ambalaže").MinWidth(100);
        //  columns.AddFor(u => u.Tara).Caption("Tara ambalaže").MinWidth(30);
        columns.AddFor(u => u.StatusDisplay).Caption("Status").MinWidth(40).AllowEditing(false);

        columns.AddFor(u => u.BarCode).Caption("Barkod").MinWidth(100).AllowEditing(false);
        columns.Add()
        .Type(GridCommandColumnType.Buttons)
        .Width(120)
        .Buttons(b =>
        {
            b.Add().Name(GridColumnButtonName.Save);
            b.Add()
             .Hint("Kloniraj")
             .Icon("repeat")
             .OnClick("onCloneIconClick");
            //b.Add().Hint("Stampa").Icon("print")
            // .OnClick("onPreparePrint");
            b.Add()
            .Hint("Storniraj")
            .Icon("trash")
            .OnClick("onPrepareDeleteBarcode");
        });
    })
    .Editing(editing =>
    {
        editing.Mode(GridEditMode.Row);
        editing.AllowAdding(true);
        editing.ConfirmDelete(false);
        editing.AllowUpdating(true);
    })
    .Paging(p => p.PageSize(100))
    .Pager(pager =>
    {
        pager.ShowPageSizeSelector(true);
        pager.AllowedPageSizes(new[] { 10, 50, 100, 200, 300 });
    })
    .Summary(s => s
    .TotalItems(totalItems =>
    {
        totalItems.Add()
               .Column("BarCode")
               .Name("Barcode")
               .SummaryType(SummaryType.Count).DisplayFormat("Broj redova: " + " {0}");
        // .CustomizeText("PlotCountPerPage");
    })
    )
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(f => f.Visible(true))
    .FocusedRowEnabled(true)
    .OnInitNewRow("onInitNewRow")
    .OnRowInserting("onRowInsertingBarCode")
    .OnToolbarPreparing("onToolbarPreparing")
    )

