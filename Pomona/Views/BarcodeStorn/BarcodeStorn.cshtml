@{
    Layout = null;
}

@{ await Html.RenderPartialAsync("PopupMessage"); }
@{ await Html.RenderPartialAsync("PopupMessageYesNo"); }


@(Html.DevExtreme().DataGrid<Pomona.Models.BarCodeGenerator>()
                                              .ID("barcodeStornGrid")
                                              .ShowBorders(true)
                                               .ElementAttr("overflow", "auto")
                                              .ShowColumnHeaders(true)
                                              .Sorting(sorting => sorting.Mode(GridSortingMode.Multiple))
                                              .ColumnMinWidth(50)
                                              .ColumnResizingMode(ColumnResizingMode.Widget)
                                              .DataSource(d => d.Mvc().Controller("BarcodeStorn")
                                              .LoadAction("GetBarCodesStorn")
                                              .UpdateAction("UpdateBarcodeStorn")                                           
                                              .Key("BarCode")).KeyExpr("BarCode")                                                             
                                              .Columns(columns =>
                                              {
                                                  columns.AddFor(u => u.BarCode).Caption("Barkod").MinWidth(100).AllowEditing(false).SelectedFilterOperation(FilterOperations.StartsWith);

                                                  columns.AddFor(u => u.EmployeeID).Lookup(lookup =>
                                                  lookup.DataSource(ds => ds.WebApi().Controller("Employee").LoadAction("GetEmployeesStaticList")
                                                  .Key("EmployeeID")).DisplayExpr("NameSurname").ValueExpr("EmployeeID"))
                                                  .Caption("Berač").MinWidth(120).AllowEditing(false);

                                                  columns.AddFor(u => u.UserID).Lookup(lookup =>
                                                 lookup.DataSource(ds => ds.WebApi().Controller("Login").LoadAction("GetUsersStaticList")
                                                 .Key("UserID")).DisplayExpr("NameSurname").ValueExpr("UserID"))
                                                 .Caption("Kontrolor").MinWidth(120).AllowEditing(false);

                                                  columns.AddFor(u => u.DateGenerated).Caption("Datum").MinWidth(80).AllowEditing(false).Format("dd.MM.yyyy");

                                                  columns.AddFor(u => u.PlotListId).Lookup(lookup =>
                                                  lookup.DataSource(ds => ds.WebApi().Controller("Plot").LoadAction("GetPlotList")
                                                  .Key("PlotListId")).DisplayExpr("PlotListName").ValueExpr("PlotListId")).Caption("Parcela").MinWidth(100).AllowEditing(false);

                                                  columns.AddFor(u => u.PlotId).Lookup(lookup =>
                                                  lookup.DataSource(ds => ds.WebApi().Controller("Plot").LoadAction("GetPlotsStaticList")
                                                  .Key("PlotId")).DisplayExpr("PlotLabel").ValueExpr("PlotId")).Caption("Red Parcele").MinWidth(100).AllowEditing(false);

                                                  columns.AddFor(u => u.CultureId).Lookup(lookup =>
                                                  lookup.DataSource(ds => ds.WebApi().Controller("Culture").LoadAction("GetCulturesStaticList")
                                                  .Key("CultureId")).DisplayExpr("CultureName").ValueExpr("CultureId")).Caption("Vrsta voća").MinWidth(100).AllowEditing(false);

                                                  columns.AddFor(u => u.CultureTypeId).Lookup(lookup =>
                                                  lookup.DataSource(ds => ds.WebApi().Controller("CultureType").LoadAction("GetCultureTypesStaticList")
                                                  .Key("CultureTypeId")).DisplayExpr("CultureTypeName").ValueExpr("CultureTypeId")).Caption("Sorta voća").MinWidth(100).AllowEditing(false);

                                                  columns.AddFor(u => u.PackagingId).Lookup(lookup =>
                                                  lookup.DataSource(ds => ds.WebApi().Controller("Packaging").LoadAction("GetPackagingsStaticList")
                                                  .Key("PackagingId")).DisplayExpr("PackagingType").ValueExpr("PackagingId")).Caption("Tip ambalaže").MinWidth(100).AllowEditing(false);               
                                                  columns.AddFor(u => u.Bruto).Caption("Bruto(kg)").MinWidth(40).Format("#,##0.000").AllowEditing(false);
                                                  columns.AddFor(u => u.StatusDisplay).Caption("Status").MinWidth(40).AllowEditing(false);
                                                  columns.AddFor(u => u.IndikatorStorn).Caption("Storniraj").AllowEditing(true).AllowSearch(false)
                                                .HeaderCellTemplate(@<text>
                                                    @(Html.DevExtreme().CheckBox().OnValueChanged("toggleSelection").Hint("Select All"))
                                                                   </text>);;

                                                  columns.Add()
                                                   .Type(GridCommandColumnType.Buttons)
                                                   .Width(120)
                                                   .Buttons(b =>
                                                   {
                                                       b.Add().Name(GridColumnButtonName.Edit);
                                                    
                                                   });
                                              })
                                              .Editing(editing =>
                                              {
                                                  editing.Mode(GridEditMode.Batch);
                                                  editing.AllowAdding(false);
                                                  editing.ConfirmDelete(false);
                                                  editing.AllowUpdating(true);
                                              })
                                            .Paging(p => p.PageSize(25))
                                            .Pager(pager =>
                                            {
                                                pager.ShowPageSizeSelector(true);
                                                pager.AllowedPageSizes(new[] { 25,50,100,200 });
                                               
                                            })                                           
                                            .FilterRow(f => f.Visible(true))
                                            .HeaderFilter(f => f.Visible(true))
                                            .FocusedRowEnabled(true)

                                         )
