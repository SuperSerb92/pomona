@{
    Layout = null;
}

@{ await Html.RenderPartialAsync("PopupMessage"); }
@{ await Html.RenderPartialAsync("PopupMessageYesNo"); }


@*@(Html.DevExtreme().DateBox()
        .Type(DateBoxType.Date)
        .Value(DateTime.Now).Width(200)
    )*@


@using (Html.BeginForm())
{
    @* <div class="dx-field">*@
    @*<div class="dx-field-label" width="50">Pretraga</div>*@
    @* <div class="dx-field-value" width="50px">*@
    @(Html.DevExtreme().DateBox().Width(400)
                .ID("advanced-datebox")
                .Value(new JS("new Date().getTime()"))
                .StylingMode(EditorStylingMode.Outlined)
                .OnInitialized("dateOnInitialized")
                .OnValueChanged("dateChanged").DisplayFormat("dd.MM.yyyy")              
                .Buttons(buttons => {
                    buttons.Add()
                        .Name("today")
                        .Location(TextEditorButtonLocation.Before)
                        .Widget(w => w.Button()
                            .Text("Danas")
                            .OnClick("today"));

                    buttons.Add()
                        .Name("prevDate")
                        .Location(TextEditorButtonLocation.Before)
                        .Widget(w => w.Button()
                            .Icon("spinprev")
                            .StylingMode(ButtonStylingMode.Text)
                            .OnClick("prevDate"));

                    buttons.Add()
                        .Name("nextDate")
                        .Location(TextEditorButtonLocation.After)
                        .Widget(w => w.Button()
                            .Icon("spinnext")
                            .StylingMode(ButtonStylingMode.Text)
                            .OnClick("nextDate"));

                    buttons.Add()
                        .Name("dropDown");
                })
            )
    @*</div>
        </div>*@

    @(Html.DevExtreme().DataGrid<Pomona.Models.WorkEvaluation>
    ()
    .ID("workEvaluationGrid")
    .ShowBorders(true)
    .ElementAttr("overflow", "auto")
    .ShowColumnHeaders(true)
    .Sorting(sorting => sorting.Mode(GridSortingMode.Multiple))
    .ColumnMinWidth(50)
    .ColumnResizingMode(ColumnResizingMode.Widget)
    .DataSource(d => d.Mvc().Controller("WorkEvaluation")
    .LoadAction("GetWorkEvaluations")
    .UpdateAction("UpdateEvaluation")
    .Key("Id"))
    .Columns(columns =>
    {
        columns.AddFor(u => u.NameSurname).Caption("Berač").AllowEditing(false);
        columns.AddFor(u => u.Neto).Caption("Neto težina (kg)").AllowEditing(false).Format("#,##0.000");
        columns.AddFor(u => u.Date).Caption("Datum").Visible(false);
        columns.AddFor(u => u.NoOfBoxes).Caption("Broj kutija").AllowEditing(false);
        columns.AddFor(u => u.PayPerDay).Caption("Dnevnica (rsd)").DataType(GridColumnDataType.Number).Format(Format.FixedPoint);
        columns.AddFor(u => u.ExpenseKg).Caption("Iznos po kg (rsd)").Format(Format.FixedPoint);
        columns.AddFor(u => u.Total).Caption("Trošak (rsd)").AllowEditing(false).Format(Format.FixedPoint);
        columns.AddFor(u => u.Evaluation).Caption("Ocena");
     //   columns.Add()
      //  .Type(GridCommandColumnType.Buttons)
     //   .Width(120)
        //.Buttons(b =>
        //{
        //    b.Add().Name(GridColumnButtonName.Edit);
        //});
    })
    .Editing(editing =>
    {
        editing.Mode(GridEditMode.Batch);
        editing.AllowAdding(false);
        editing.ConfirmDelete(false);
        //  editing.AllowDeleting(true);
        editing.SelectTextOnEditStart(true);
        editing.AllowUpdating(true);
        editing.StartEditAction(GridStartEditAction.Click);
    })
    .Paging(p => p.PageSize(10))
    .Pager(pager =>
    {
        pager.ShowPageSizeSelector(true);
        pager.AllowedPageSizes(new[] { 10,50,100 });

        //pager.ShowInfo(true);
        //pager.InfoText("Strana {0}. Ukupno: {1} ({2} items)");
    })
    .Summary(s => s
    .TotalItems(totalItems =>
    {
        totalItems.Add()
             .Column("NameSurname")
             .Name("WorkerCount")
             .SummaryType(SummaryType.Count).DisplayFormat("Ukupno: " + " {0}");

        totalItems.Add()
               .Column("Neto")
               .Name("NetSummary")
               .SummaryType(SummaryType.Sum).DisplayFormat("Ukupno: " + " {0}").ValueFormat("#,##0.000");

        totalItems.Add()
         .Column("NoOfBoxes")
         .Name("NoOfBoxes")
         .SummaryType(SummaryType.Sum).DisplayFormat("Ukupno: " + " {0}").ValueFormat(Format.FixedPoint);

        totalItems.Add()
       .Column("PayPerDay")
       .Name("Dnevnica")
       .SummaryType(SummaryType.Sum).DisplayFormat("Ukupno: " + " {0}").ValueFormat(Format.FixedPoint);

        totalItems.Add()
      .Column("Total")
      .Name("Ukupno")
      .SummaryType(SummaryType.Sum).DisplayFormat("Ukupno: " + " {0}").ValueFormat(Format.FixedPoint);

    })
    )
    .FilterRow(f => f.Visible(true))
    .HeaderFilter(f => f.Visible(true))
    .FocusedRowEnabled(true)
    .OnInitialized("filterGridOnStart")
    //.OnRowInserting("onRowInsertingEmployees")
    .OnRowUpdating("onRowUpdating")
    // .OnToolbarPreparing("toolbar_preparing")

    )
}

